import { makeApi, Zodios, type ZodiosOptions } from "@zodios/core";
import { z } from "zod";

{{#if imports}}
{{#each imports}}
import { {{{@key}}} } from "./{{{this}}}"
{{/each}}
{{/if}}

// Custom datetime schema that handles non-standard formats
const customDatetimeSchema = z.preprocess(
  (val) => {
    if (typeof val === 'string') {
      // Handle various datetime formats including "2023-07-26T04:32:01.69"
      const cleaned = val.replace(/\.\d{1,2}$/, '').replace(/\.\d{3}$/, '');
      const date = new Date(cleaned);
      return isNaN(date.getTime()) ? val : date.toISOString();
    }
    return val;
  },
  z.string().datetime()
);

{{#if types}}
{{#each types}}
{{{this}}};
{{/each}}
{{/if}}

{{#each schemas}}
const {{@key}}{{#if (lookup ../emittedType @key)}}: z.ZodType<{{@key}}>{{/if}} = {{{this}}};
{{/each}}

{{#ifNotEmptyObj schemas}}
export const schemas = {
{{#each schemas}}
	{{@key}},
{{/each}}
};
{{/ifNotEmptyObj}}

const endpoints = makeApi([
{{#each endpoints}}
	{
		method: "{{method}}",
		path: "{{path}}",
		{{#if @root.options.withAlias}}
		{{#if alias}}
		alias: "{{alias}}",
		{{/if}}
		{{/if}}
		{{#if description}}
		description: `{{description}}`,
		{{/if}}
		{{#if requestFormat}}
		requestFormat: "{{requestFormat}}",
		{{/if}}
		{{#if parameters}}
		parameters: [
			{{#each parameters}}
			{
				name: "{{name}}",
				{{#if description}}
				description: `{{description}}`,
				{{/if}}
				{{#if type}}
				type: "{{type}}",
				{{/if}}
				schema: {{{schema}}}
			},
			{{/each}}
		],
		{{/if}}
		response: {{{response}}},
		{{#if errors.length}}
		errors: [
			{{#each errors}}
			{
				{{#ifeq status "default" }}
				status: "default",
				{{else}}
				status: {{status}},
				{{/ifeq}}
				{{#if description}}
				description: `{{description}}`,
				{{/if}}
				schema: {{{schema}}}
			},
			{{/each}}
		]
		{{/if}}
	},
{{/each}}
]);

export const {{options.apiClientName}} = new Zodios({{#if options.baseUrl}}"{{options.baseUrl}}", {{/if}}endpoints);

export function createApiClient(baseUrl: string, options?: ZodiosOptions) {
    return new Zodios(baseUrl, endpoints, options);
}

// Custom client factory with datetime preprocessing
export function createCustomApiClient(baseUrl: string, options?: ZodiosOptions) {
    // Transform schemas to use custom datetime handling
    const transformedEndpoints = endpoints.map(endpoint => {
        const transformSchema = (schema: any): any => {
            if (typeof schema === 'object' && schema !== null) {
                if (schema._def?.typeName === 'ZodString' && schema._def?.checks?.some((check: any) => check.kind === 'datetime')) {
                    return customDatetimeSchema;
                }
                if (schema._def?.typeName === 'ZodObject') {
                    const transformedShape = {};
                    for (const [key, value] of Object.entries(schema.shape || {})) {
                        transformedShape[key] = transformSchema(value);
                    }
                    return z.object(transformedShape);
                }
                if (schema._def?.typeName === 'ZodArray') {
                    return z.array(transformSchema(schema.element));
                }
                if (schema._def?.typeName === 'ZodOptional') {
                    return z.optional(transformSchema(schema.unwrap()));
                }
                if (schema._def?.typeName === 'ZodNullable') {
                    return z.nullable(transformSchema(schema.unwrap()));
                }
            }
            return schema;
        };

        return {
            ...endpoint,
            response: transformSchema(endpoint.response),
            parameters: endpoint.parameters?.map(param => ({
                ...param,
                schema: transformSchema(param.schema)
            }))
        };
    });

    return new Zodios(baseUrl, transformedEndpoints, options);
}